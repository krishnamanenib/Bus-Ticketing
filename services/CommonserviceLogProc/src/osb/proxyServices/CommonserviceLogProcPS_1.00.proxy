<?xml version="1.0" encoding="UTF-8"?>
<xml-fragment xmlns:ser="http://www.bea.com/wli/sb/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://www.bea.com/wli/sb/typesystem/config" xmlns:tran="http://www.bea.com/wli/sb/transports" xmlns:env="http://www.bea.com/wli/config/env" xmlns:con1="http://www.bea.com/wli/sb/pipeline/config" xmlns:con2="http://www.bea.com/wli/sb/stages/config" xmlns:con3="http://www.bea.com/wli/sb/stages/transform/config" xmlns:con4="http://www.bea.com/wli/sb/stages/logging/config" xmlns:con5="http://www.bea.com/wli/sb/stages/publish/config" xmlns:con6="http://www.bea.com/wli/sb/stages/routing/config">
  <ser:coreEntry isProxy="true" isEnabled="true" isAutoPublish="false" isTracingEnabled="false">
    <ser:description/>
    <ser:binding type="Mixed" xsi:type="con:MixedBindingType" xmlns:con="http://www.bea.com/wli/sb/services/bindings/config">
      <con:request type="XML">
        <con7:schema ref="CommonServiceInterfaces/src/osb/resources/schemas/LogMessageXSD_1.00" element="LogMessage" xmlns:con7="http://www.bea.com/wli/sb/typesystem/config"/>
      </con:request>
    </ser:binding>
    <ser:monitoring isEnabled="false">
      <ser:aggregationInterval>10</ser:aggregationInterval>
      <ser:pipelineMonitoringLevel>Pipeline</ser:pipelineMonitoringLevel>
    </ser:monitoring>
    <ser:reporting>true</ser:reporting>
    <ser:logging isEnabled="true">
      <ser:logLevel>debug</ser:logLevel>
    </ser:logging>
    <ser:sla-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:sla-alerting>
    <ser:pipeline-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:pipeline-alerting>
    <ser:throttling enabled="false">
      <ser:capacity>0</ser:capacity>
      <ser:maxQueueLength>0</ser:maxQueueLength>
      <ser:timeToLive>0</ser:timeToLive>
    </ser:throttling>
    <ser:messageTracing enabled="false">
      <ser:detailsLevel>Terse</ser:detailsLevel>
      <ser:maxSize>8192</ser:maxSize>
    </ser:messageTracing>
    <ser:transactions isRequired="false" sameTxForResponse="false"/>
  </ser:coreEntry>
  <ser:endpointConfig>
    <tran:provider-id>jms</tran:provider-id>
    <tran:inbound>true</tran:inbound>
    <tran:URI>
      <env:value>jms://!!osb.jms.loadbalancer!!/!!osb.jms.connectionfactory!!/jms.commonServicesLogging_In</env:value>
    </tran:URI>
    <tran:inbound-properties/>
    <tran:all-headers>true</tran:all-headers>
    <tran:provider-specific xsi:type="jms:JmsEndPointConfiguration" xmlns:jms="http://www.bea.com/wli/sb/transports/jms">
      <jms:is-queue>true</jms:is-queue>
      <jms:is-secure>false</jms:is-secure>
      <jms:inbound-properties>
        <jms:response-required>false</jms:response-required>
        <jms:XA-required>false</jms:XA-required>
      </jms:inbound-properties>
      <jms:dispatch-policy>weblogic.commonservices.DispatchPolicy</jms:dispatch-policy>
      <jms:request-encoding>UTF-8</jms:request-encoding>
      <jms:jndi-timeout>0</jms:jndi-timeout>
    </tran:provider-specific>
  </ser:endpointConfig>
  <ser:router errorHandler="_onErrorHandler-7620072564890839053--63b5eb00.13688e1ed5d.-7f64">
    <con1:pipeline name="PipelinePairNode1_response" type="response"/>
    <con1:pipeline name="PipelinePairNode1_request" type="request">
      <con1:stage name="LogWrite" errorHandler="_onErrorHandler-5877396529816301773--1eb89ef5.136de17c784.-76fa">
        <con1:comment>Write the log message to the log file</con1:comment>
        <con1:context>
          <con2:varNsDecl namespace="http://www.xmlns.nike.com/enterprise/resources/LogMessage/xsd" prefix="xsd1"/>
          <con2:varNsDecl namespace="http://www.xmlns.nike.com/enterprise/resources/xsd/log/v1" prefix="v1"/>
        </con1:context>
        <con1:actions>
          <con3:javaCallout varName="serverName">
            <con2:id>_ActionId-2132845469969048207--176fde37.138073320fb.-7fdd</con2:id>
            <con3:archive ref="CommonServiceInterfaces/src/osb/resources/jars/JavaCall_ServerName"/>
            <con3:className>JavaObj</con3:className>
            <con3:method>public static java.lang.String get_ServerName()</con3:method>
          </con3:javaCallout>
          <con3:assign varName="logPath">
            <con2:comment>Getting the log path from the log details</con2:comment>
            <con2:id>_ActionId-7655936592623671974--470c5a1b.137c05dacb1.-7ba5</con2:id>
            <con3:expr>
              <con2:xqueryText>data($inbound/ctx:transport/ctx:request/tp:headers/tp:user-header[@name='logPath']/@value)</con2:xqueryText>
            </con3:expr>
          </con3:assign>
          <con3:assign varName="logFileName">
            <con2:comment>Getting the log filename from the log details and applying the time based file rollover</con2:comment>
            <con2:id>_ActionId-7655936592623671974--470c5a1b.137c05dacb1.-7ba3</con2:id>
            <con3:expr>
              <con2:xqueryText>fn:concat(fn:substring-before(data($inbound/ctx:transport/ctx:request/tp:headers/tp:user-header[@name='logFileName']/@value),'.log'),'_',$serverName,'_',fn:substring(xs:string(fn:current-dateTime()),1,10),'.log')</con2:xqueryText>
            </con3:expr>
          </con3:assign>
          <con3:replace varName="body" contents-only="false">
            <con2:id>_ActionId-7655936592623671974--470c5a1b.137c05dacb1.-7a31</con2:id>
            <con3:location>
              <con2:xpathText>./v1:LogMessage/v1:Header</con2:xpathText>
            </con3:location>
            <con3:expr>
              <con2:xqueryText><![CDATA[<Header>
		<PlatformName>{data($body/v1:LogMessage/v1:Header/v1:PlatformName)}</PlatformName>
		<ServiceName>{data($body/v1:LogMessage/v1:Header/v1:ServiceName)}</ServiceName>
		<ServiceID>{data($body/v1:LogMessage/v1:Header/v1:ServiceID)}</ServiceID>
</Header>]]></con2:xqueryText>
            </con3:expr>
          </con3:replace>
          <con3:replace varName="body">
            <con2:id>_ActionId-2132845469969048207--176fde37.138073320fb.-7f9d</con2:id>
            <con3:location>
              <con2:xpathText>./v1:LogMessage/v1:Body</con2:xpathText>
            </con3:location>
            <con3:expr>
              <con2:xqueryText><![CDATA[<Body>
		<LinkID>{data($body/v1:LogMessage/v1:Body/v1:LinkID)}</LinkID>
		<ServerName>{data($body/v1:LogMessage/v1:Body/v1:ServerName)}</ServerName>
		<ServerTimestamp>{data($body/v1:LogMessage/v1:Body/v1:ServerTimestamp)}</ServerTimestamp>
		<TrackingID>{data($body/v1:LogMessage/v1:Body/v1:TrackingIDText)}</TrackingID>
		<BusinessKeyName>{data($body/v1:LogMessage/v1:Body/v1:BusinessKeyName)}</BusinessKeyName> 
		<BusinessKeyText>{data($body/v1:LogMessage/v1:Body/v1:BusinessKeyText)}</BusinessKeyText>
		<MessageText>{data($body/v1:LogMessage/v1:Body/v1:MessageText)}</MessageText>
		<LogLevelCode>{data($body/v1:LogMessage/v1:Body/v1:LogLevelCode)}</LogLevelCode>
		<StackTraceText>{fn-bea:inlinedXML($body/v1:LogMessage/v1:Body/v1:StackTraceText)}</StackTraceText>
</Body>]]></con2:xqueryText>
            </con3:expr>
          </con3:replace>
        </con1:actions>
      </con1:stage>
    </con1:pipeline>
    <con1:pipeline type="error" name="_onErrorHandler-5877396529816301773--1eb89ef5.136de17c784.-76fa">
      <con1:stage name="CommonserviceLogProcLogWrite_ErrorHandler">
        <con1:comment>Stage level error handler</con1:comment>
        <con1:context>
          <con2:varNsDecl prefix="xsd1" namespace="http://www.xmlns.nike.com/enterprise/resources/LogMessage/xsd"/>
          <con2:varNsDecl namespace="http://www.xmlns.nike.com/enterprise/resources/xsd/log/v1" prefix="v1"/>
        </con1:context>
        <con1:actions>
          <con3:replace varName="fault" contents-only="true">
            <con2:comment>Descriptive error reason for errors</con2:comment>
            <con2:id>_ActionId-5877396529816301773--1eb89ef5.136de17c784.-76c0</con2:id>
            <con3:location>
              <con2:xpathText>./ctx:reason</con2:xpathText>
            </con3:location>
            <con3:expr>
              <con2:xqueryText>fn:concat('Error in CommonLogService/LogWriteStage :: ',$fault/ctx:reason)</con2:xqueryText>
            </con3:expr>
          </con3:replace>
          <con4:log>
            <con2:comment>Logging to the managed server log file incase of error</con2:comment>
            <con2:id>_ActionId-5877396529816301773--1eb89ef5.136de17c784.-76bf</con2:id>
            <con4:logLevel>error</con4:logLevel>
            <con4:expr>
              <con2:xqueryText><![CDATA[<LoggingServiceErrorMessage>
<payload>{$inboundMessage}</payload>
<fault>{$fault/*}</fault>
</LoggingServiceErrorMessage>]]></con2:xqueryText>
            </con4:expr>
            <con4:message>CMN_LOG</con4:message>
          </con4:log>
          <con2:reply isError="true">
            <con2:comment>Replying with failure incase of error</con2:comment>
            <con2:id>_ActionId-5877396529816301773--1eb89ef5.136de17c784.-76be</con2:id>
          </con2:reply>
        </con1:actions>
      </con1:stage>
    </con1:pipeline>
    <con1:pipeline name="_onErrorHandler-7620072564890839053--63b5eb00.13688e1ed5d.-7f64" type="error">
      <con1:stage name="CommonserviceLogProcPS_1.00 ErrorHandler">
        <con1:comment>Service level error handler</con1:comment>
        <con1:context>
          <con2:varNsDecl prefix="xsd1" namespace="http://www.xmlns.nike.com/enterprise/resources/LogMessage/xsd"/>
          <con2:varNsDecl namespace="http://www.xmlns.nike.com/enterprise/resources/xsd/log/v1" prefix="v1"/>
        </con1:context>
        <con1:actions>
          <con3:ifThenElse>
            <con2:id>_ActionId-7200004063031826928--205cc666.13773125280.-7f3e</con2:id>
            <con3:case>
              <con3:condition>
                <con2:xqueryText>$fault/ctx:errorCode='LOGE-06'</con2:xqueryText>
              </con3:condition>
              <con3:actions>
                <con3:replace varName="body" contents-only="true">
                  <con2:comment>Replace the $body on incoming message with formatted Log message</con2:comment>
                  <con2:id>_ActionId-7200004063031826928--205cc666.13773125280.-7f3c</con2:id>
                  <con3:location>
                    <con2:xpathText>./v1:LogMessage</con2:xpathText>
                  </con3:location>
                  <con3:expr>
                    <con2:xqueryText>&lt;LogMessage> 
PlatformName : {data($body/v1:LogMessage/v1:Header/v1:PlatformName)}
ServiceName : {data($body/v1:LogMessage/v1:Header/v1:ServiceName)}
ServiceID: {data($body/v1:LogMessage/v1:Header/v1:ServiceID)}
LinkID: {data($body/v1:LogMessage/v1:Body/v1:LinkID)}
ServerName : {data($body/v1:LogMessage/v1:Body/v1:ServerName)}
ServerTimestamp : {data($body/v1:LogMessage/v1:Body/v1:ServerTimestamp)}
TrackingID : {data($body/v1:LogMessage/v1:Body/v1:TrackingIDText)}
BusinessKeyName : {data($body/v1:LogMessage/v1:Body/v1:BusinessKeyName)} 
BusinessKeyText : {data($body/v1:LogMessage/v1:Body/v1:BusinessKeyText)}
MessageText : {data($body/v1:LogMessage/v1:Body/v1:MessageText)}
LogLevelCode : {data($body/v1:LogMessage/v1:Body/v1:LogLevelCode)}
StackTraceText : {fn-bea:inlinedXML($body/v1:LogMessage/v1:Body/v1:StackTraceText)}
&lt;/LogMessage></con2:xqueryText>
                  </con3:expr>
                </con3:replace>
                <con5:route>
                  <con2:comment>Log message published to JMS Queue in common schema format</con2:comment>
                  <con2:id>_ActionId-7200004063031826928--205cc666.13773125280.-7f39</con2:id>
                  <con5:service ref="CommonserviceLogProc/src/osb/businessServices/CommonserviceLogProcLogWriteBS_1.00" xsi:type="ref:BusinessServiceRef" xmlns:ref="http://www.bea.com/wli/sb/reference"/>
                  <con5:operation>Write</con5:operation>
                  <con5:outboundTransform>
                    <con3:routing-options>
                      <con2:comment>Restricting the retry count to exactly once</con2:comment>
                      <con2:id>_ActionId-7200004063031826928--205cc666.13773125280.-7f38</con2:id>
                      <con3:qualityOfService>exactly-once</con3:qualityOfService>
                    </con3:routing-options>
                  </con5:outboundTransform>
                </con5:route>
              </con3:actions>
            </con3:case>
            <con3:default/>
          </con3:ifThenElse>
          <con4:log>
            <con2:comment>Logging to the managed server log file incase of error</con2:comment>
            <con2:id>_ActionId-7620072564890839053--63b5eb00.13688e1ed5d.-7f63</con2:id>
            <con4:logLevel>error</con4:logLevel>
            <con4:expr>
              <con2:xqueryText><![CDATA[<LoggingServiceErrorMessage>
<payload>{$inboundMessage}</payload>
<fault>{$fault/*}</fault>
</LoggingServiceErrorMessage>]]></con2:xqueryText>
            </con4:expr>
            <con4:message>CMN_LOG</con4:message>
          </con4:log>
          <con2:reply isError="true">
            <con2:comment>Replying with failure incase of error</con2:comment>
            <con2:id>_ActionId-8863386359683929997-7247eda8.136c3d94f16.-7f40</con2:id>
          </con2:reply>
        </con1:actions>
      </con1:stage>
    </con1:pipeline>
    <con1:pipeline type="error" name="_onErrorHandler-2880355042549149408--14e85c04.13808114afe.-7d6a">
      <con1:stage name="CommonserviceLogProcLogWrite_ErrorHandlerRouteNode">
        <con1:comment>Route Node Error Handler</con1:comment>
        <con1:context/>
        <con1:actions>
          <con3:replace varName="fault" contents-only="true">
            <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-7d27</con2:id>
            <con3:location>
              <con2:xpathText>./ctx:reason</con2:xpathText>
            </con3:location>
            <con3:expr>
              <con2:xqueryText>fn:concat('Error in CommonLogService/RouteNodeWriteToLogFile :: ',$fault/ctx:reason)</con2:xqueryText>
            </con3:expr>
          </con3:replace>
          <con4:log>
            <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-7d03</con2:id>
            <con4:logLevel>error</con4:logLevel>
            <con4:expr>
              <con2:xqueryText><![CDATA[<LoggingServiceErrorMessage>
<payload>{$inboundMessage}</payload>
<fault>{$fault/*}</fault>
</LoggingServiceErrorMessage>]]></con2:xqueryText>
            </con4:expr>
            <con4:message>CMN_LOG</con4:message>
          </con4:log>
          <con2:reply isError="true">
            <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-7cb4</con2:id>
          </con2:reply>
        </con1:actions>
      </con1:stage>
    </con1:pipeline>
    <con1:flow>
      <con1:pipeline-node name="PipelinePairNode1">
        <con1:request>PipelinePairNode1_request</con1:request>
        <con1:response>PipelinePairNode1_response</con1:response>
      </con1:pipeline-node>
      <con1:route-node name="RouteNodeWriteToLogFile" error-handler="_onErrorHandler-2880355042549149408--14e85c04.13808114afe.-7d6a">
        <con1:context/>
        <con1:actions>
          <con6:route>
            <con2:id>_ActionId-2132845469969048207--176fde37.138073320fb.-7f72</con2:id>
            <con6:service ref="CommonserviceLogProc/src/osb/businessServices/CommonserviceLogProcLogWriteBS_1.00" xsi:type="ref:BusinessServiceRef" xmlns:ref="http://www.bea.com/wli/sb/reference"/>
            <con6:operation>Write</con6:operation>
            <con6:outboundTransform>
              <con3:routing-options>
                <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-7fbc</con2:id>
                <con3:qualityOfService>best-effort</con3:qualityOfService>
              </con3:routing-options>
              <con3:ifThenElse>
                <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-7f5b</con2:id>
                <con3:case>
                  <con3:condition>
                    <con2:xqueryText>fn:string-length($logPath)>0 and fn:string-length($logFileName)>0</con2:xqueryText>
                  </con3:condition>
                  <con3:actions>
                    <con3:transport-headers copy-all="false">
                      <con2:id>_ActionId-2880355042549149408--14e85c04.13808114afe.-73ae</con2:id>
                      <con3:header-set>outbound-request</con3:header-set>
                      <con3:header name="jca.file.Directory" value="expression">
                        <con2:xqueryText>$logPath</con2:xqueryText>
                      </con3:header>
                      <con3:header name="jca.file.FileName" value="expression">
                        <con2:xqueryText>$logFileName</con2:xqueryText>
                      </con3:header>
                    </con3:transport-headers>
                  </con3:actions>
                </con3:case>
                <con3:default/>
              </con3:ifThenElse>
            </con6:outboundTransform>
            <con6:responseTransform/>
          </con6:route>
        </con1:actions>
      </con1:route-node>
    </con1:flow>
  </ser:router>
</xml-fragment>