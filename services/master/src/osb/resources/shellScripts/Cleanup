#!/usr/bin/ksh
#----------------------------------------------------------------------------------------------------------
# Script name: Cleanup
# Purpose    : deleting files from specified directories
# Version    : 1. 06/15/2011 ADAS Initial version
#            : 2. 06/17/2011 ADAS Fixed bug - Unable to expand file/dir name
#            : 3. 06/21/2011 ADAS Changed the logfile name similar to property file name 
#            : 4. 06/24/2011 ADAS Added features: Logcleanup, check exception directory
#            : 5. 06/26/2011 ADAS Added-If valid logdir does not exist then exit 
#                                 Added-error handling If property file format not correct 
#                                 Added-No. of log deletion days,exception dirnames to be passed as variable
#----------------------------------------------------------------------------------------------------------

# Source in the CUSTOM_PROFILE if set.
# This will be set in sudo'ing from the Autosys trg-user to our Admin userid.  System variables do not
# cross over in the sudo, but this variable does (configured that way in /etc/sudoers).
if [ "x${CUSTOM_PROFILE}" != "x" ] ; then
  echo "Sourcing in CUSTOM_PROFILE '${CUSTOM_PROFILE}'"
  . ${CUSTOM_PROFILE}
else
  echo "no CUSTOM_PROFILE set"
fi

##--------------Usage function------------------##
usage ()
{
 echo " Usage: Cleanup.ksh
 -f  <file name [mandatory]>
 -lf <log file name [optional]>
 "
 exit 2;
}

##--------------Cleanup log function--------------##
cleanup_log ()
{
cd $LOGDIR 2>/dev/null;
if [ $? -eq 0 ];then
 echo "INFO: Log Directory is $LOGDIR";
 
 #------- Initialising Logging---------- #                                                                                  
 echo "-------Log details for Cleanup.ksh executed at $DATE-$TIME Hrs-------" > $LOGDIR/$LOGFILE;
 
 #-------Deleting logs---------------------#
 days=7
 echo "INFO: List of $days days old logs in $LOGDIR (if exists)"
 echo "INFO: List of $days days old logs in $LOGDIR (if exists)" >> $LOGDIR/$LOGFILE;
 find . -type f -mtime +${days} -name "$LOG*.log"  2>/dev/null >> $LOGDIR/$LOGFILE;
 find . -type f -mtime +${days} -name "$LOG*.log" 2>/dev/null;
  if [ $? -ne 0 ];then
   echo "WARNING: Error in reading subdirectories of $LOGDIR because of insufficient permission";                           
   echo "WARNING: Error in reading subdirectories of $LOGDIR because of insufficient permission" >> $LOGDIR/$LOGFILE;
  fi
 
 find . -type f -mtime +${days} -name "$LOG*.log" -exec rm -f {} 2>/dev/null \;
   if [ $? -ne 0 ];then
     echo "WARNING: Error in deleting old logs from subdirectories of $LOGDIR"
     echo "WARNING: Error in deleting old logs from subdirectories of $LOGDIR" >> $LOGDIR/$LOGFILE;
   fi
  echo "INFO: $days days old Logs (if present) successfully deleted from $LOGDIR";
  echo "INFO: $days days old Logs (if present) successfully deleted from $LOGDIR" >> $LOGDIR/$LOGFILE;
 #------End of deletion of logs---------#

else
 echo "ERROR: Log directory $LOGDIR does not exist. \nERROR: Cannot continue without valid logdir. Exiting application";
 exit;
fi
}

##--------------File Processing function----------##
processfile ()
{
BASE=`basename $FILE`
DIR=`dirname $FILE`

## Setting Log file name ##
LOG=`echo $BASE | awk -F"." '{print $1}'`
LOGFILE="${LOG}.${DATE}${TIME}.log"

## Setting default log directory if not specified ##
if [ $LFLG -eq 1 ];then
 LOGDIR="$DIR/logs";
fi

## Calling function to cleanup logs ##
cleanup_log

echo "INFO: Processing FILE : $BASE located at $DIR" >>$LOGDIR/$LOGFILE ;

## Validating the file and processing its contents ##
if [ -s $FILE ];then
 echo "INFO: File $FILE is valid. \nINFO: Reading file";
 echo "INFO: File $FILE is valid. \nINFO: Reading file" >>$LOGDIR/$LOGFILE;

 #----Reading from property file------#
 dir_mask=`cat $FILE | grep -w dir_mask | awk -F"=" '{print $2}'`;
 file_mask=`cat $FILE | grep -w file_mask | awk -F"=" '{print $2}'`;
 
 #----Checking if format is correct----#
 if [ -z "$dir_mask" ] || [ -z "$file_mask" ];then
  echo "ERROR: File $FILE format is not correct. \nPlease use the below format and rerun the script";
  echo " dir_mask=<dir1>|<dir2>|<dir3>..";
  echo " file_mask=<file1>|<file2>|<file3>|<file4>...";
  echo "INFO: Next properties file will be processesd";

  echo "ERROR: File $FILE format is not correct. \nPlease use the below format and rerun the script" >>$LOGDIR/$LOGFILE;
  echo " dir_mask=<dir1>|<dir2>|<dir3>.." >>$LOGDIR/$LOGFILE;
  echo " file_mask=<file1>|<file2>|<file3>|<file4>..." >>$LOGDIR/$LOGFILE;
  echo "INFO: Next properties file will be processesd" >>$LOGDIR/$LOGFILE;

 else

 #------Processing of property file begins------#
 CNT1=`echo $dir_mask | awk -F\| '{print NF-1}'`
 CNT2=`echo $file_mask | awk -F\| '{print NF-1}'`
 dir_num=`expr ${CNT1} + 1`;
 fil_num=`expr ${CNT2} + 1`;

 #-----Looping through directory----#
 d=1
 while [ $d -le $dir_num ]
  do
    udir=`echo $dir_mask | awk -F\| '{print $'$d'}'`;
    eval dir=\"$udir\"

    #--------Checking the directory-------#
    except_dir1="/int0"
    except_dir2="/home"

    chkdir1=`echo $dir | grep "$except_dir1"`;
    chkdir2=`echo $dir | grep "$except_dir2"`;
    
    if [ -n "$chkdir1" ] || [ -n "$chkdir2" ];then
     echo "WARNING: DIR${d}:$dir is an exception directory. Deletion not allowed. Proceeding to next directory"
     echo "WARNING: DIR${d}:$dir is an exception directory. Deletion not allowed. Proceeding to next directory" >>$LOGDIR/$LOGFILE;
    else

    #-------Proceed with file deletion from dir------#
    cd $dir 2>/dev/null;
    if [ $? -eq 0 ];then
     echo "INFO: Deleting files from DIR${d}: $dir";
     echo "INFO: Deleting files from DIR${d}: $dir" >>$LOGDIR/$LOGFILE;
     
     #-------Looping through filename------#
     f=1
     while [ $f -le $fil_num ]
     do
       fil=`echo "$file_mask" | awk -F\| '{print $'$f'}'`;

       #------Checking file here----------#
       echo "INFO: Searching for DIR${d}-FILE${f} :$fil"
       echo "INFO: Searching for DIR${d}-FILE${f} :$fil" >>$LOGDIR/$LOGFILE;
       ls -l ${fil} 2>/dev/null;
       ls -l ${fil} 2>/dev/null >>$LOGDIR/$LOGFILE;
       if [ $? -eq 0 ];then
	echo "INFO: above Files found and will be deleted";
	echo "INFO: above Files found and will be deleted" >>$LOGDIR/$LOGFILE;
        
	#-----Deleting files here--------#
	rm -f ${fil} 2>/dev/null;
         if [ $? -eq 0 ];then
            echo "SUCCESS: Deleted ${dir}/${fil} via cleanup script on $DATE at $TIME";
	    echo "SUCCESS: Deleted ${dir}/${fil} via cleanup script on $DATE at $TIME" >>$LOGDIR/$LOGFILE;
         else
	    echo "WARNING: Failed to delete ${dir}/${fil} via cleanup script on $DATE at $TIME" ;
	    echo "WARNING: Failed to delete ${dir}/${fil} via cleanup script on $DATE at $TIME" >>$LOGDIR/$LOGFILE;
         fi
        else
	 echo "INFO: DIR${d}-FILE${f}: $fil not found in directory. Deletion not possible";
	 echo "INFO: DIR${d}-FILE${f}: $fil not found in directory. Deletion not possible" >>$LOGDIR/$LOGFILE;
        fi

	#-----End of file check---------#

       #------Incrementing file loop to read the next file-----#
       f=`expr ${f} + 1`;
     done
     #--------End of filename loop----------#
     
    else
      echo "WARNING: Unable to delete files from DIR${d}:$dir. [Reason:Permission denied or multiple directories by same name]" >>$LOGDIR/$LOGFILE;
      echo "WARNING: Unable to delete files from DIR${d}:$dir. [Reason:Permission denied or multiple directories by same name]";
      ls -ld $dir 2>/dev/null;
      ls -ld $dir 2>/dev/null >>$LOGDIR/$LOGFILE;
     fi
     fi 
     #-----Incrementing directory loop to read next directory-------#
     d=`expr ${d} + 1`;
  done
  #---------End of directory loop--------#
 fi 
else
 echo "WARNING: File $FILE is invalid. Unable to process";
 echo "WARNING: File $FILE is invalid. Unable to process" >>$LOGDIR/$LOGFILE;
fi
echo "INFO: Check LOG: $LOGDIR/$LOGFILE for \n  FILE: $FILE";
echo "INFO:*** End of processing $FILE ***";
echo "INFO:*** End of processing $FILE ***" >>$LOGDIR/$LOGFILE;
}

##--------------Main Function------------------##
main ()
{
echo "******************* Start of Execution *****************";
date;
## Variables declared ##
TOT=$#
ARG=$*
VAR1=`expr ${TOT} - 1`;
DATE=`date "+%Y%m%d"`
TIME=`date "+%H%M%S"`

## If no arguments passed exit application ##
if [ $TOT -lt 2 ];then
 echo "ERROR: Parameters entered incorrectly"
 usage;
fi

## Checking if logdirectory is entered properly ##
ARGL=`echo $ARG | awk -F" " '{print $'$VAR1'}'`
if [ "$ARGL" = "-lf" ] && [ $VAR1 -ge 3 ];then
 LOGDIR=`echo $ARG | awk -F" " '{print $'$TOT'}`
 echo "INFO: Logdirectory entered : $LOGDIR";
 FLG=1
 ## Validating Logdirectory ##
  ls -ld $LOGDIR 2>/dev/null;
   if [ $? -eq 0 ];then
     echo "INFO: Log directory is valid.";
     LFLG=0
   else
     echo "WARNING: Log directory is invalid. Logs will be created at property file location ";
     LFLG=1
   fi
else
 CHK1=`echo $ARG | grep -w lf`
  if [ -n "$CHK1" ];then
    echo "ERROR: Paramater entered incorrectly";
    usage
   else
    echo "INFO: Log Directory not specified. Logs will be created at property file location";
    FLG=0;
    LFLG=1;
  fi
fi

## If Log directory not specified all arguments passed will be parsed as filenames
if [ $FLG -eq 0 ];then
 VAR2=$TOT
else
 VAR2=`expr ${VAR1} - 1`
fi;

## Checking the file names and processing ##
ARGF=`echo $ARG | awk -F" " '{print $1}'`
if [ "$ARGF" = "-f" ] && [ $TOT -gt 2 ];then
 i=2
 while [ $i -le $VAR2 ]
 do
  FILE=`echo $ARG | awk -F" " '{print $'$i'}'`
  echo "INFO: Processing File `expr $i - 1`:  $FILE";
  processfile
  i=`expr ${i} + 1`
 done
elif [ "$ARGF" = "-f" ] && [ $TOT -eq 2 ];then
  FILE=`echo $ARG | awk -F" " '{print $2}'`
  echo "INFO: Single File to be processed: $FILE";
  processfile
else
 echo "ERROR: Parameters not entered properly";
 usage
fi

echo "***************** End of Execution ***************************";
}

##--------------Calling Main Function-----------##
main $@

##--------------End of Script-------------------##
 
